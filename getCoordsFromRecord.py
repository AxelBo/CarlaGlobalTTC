import math
import os
import time
import connectionCarla
import carla
import matplotlib.pyplot as plt

# get the x, y and z coordinates of an actor
def get_actor_position(world, vehicle_id):
    vehicle = world.get_actor(vehicle_id)
    if vehicle is not None:
        vehicle_location = vehicle.get_location()
        x_pos = vehicle_location.x
        y_pos = vehicle_location.y
        z_pos = vehicle_location.z

        return [x_pos, y_pos, z_pos]
    else:
        print("Actor not found")
        return None

def euclidean_distance(point1, point2):
    return ((point2[0] - point1[0]) ** 2 + (point2[1] - point1[1]) ** 2) ** 0.5

# Get all files in a folder that start with a number and an underscore
def get_filtered_files(folder_path):
    files = os.listdir(folder_path)
    return [f for f in files if f[0].isdigit() and f[1] == "_"]

# Check if a vehicle has multiple entries for a similar timeframe
def groups_contain(row, groups):
    id_vehicle = row[0]
    id_walker = row[3]
    timeframe = row[7]
    count = 0
    for line in groups:
        if line[0] == id_vehicle and (-10 < line[7] - timeframe < 10):
            return True, count
        count += 1
    return False, -1

# Load all data from the files in a folder
def load_data(path_prefix):
    data = []
    for i in range(20):
        file_path = path_prefix + str(i) + "_array_data.txt"
        if os.path.exists(file_path):
            with open(file_path, 'r') as file:
                file_data = file.readlines()
                for line in file_data:
                    line_data = eval(line.strip())
                    line_data.insert(9, i)
                    data.append(line_data)
    return data

# Select smalles ttc for each group
def process_groups(data):
    groups = []
    for line in data:
        values = line
        in_array, count = groups_contain(values, groups)
        if in_array:
            if values[6] < groups[count][6]:
                groups[count] = values
        else:
            groups.append(values)
    return groups

# Get a Carla connection with set view
def get_connection():
    conncetion = connectionCarla.CarlaConnection()
    sysncModeEnable = False
    spawnLocationWalker = carla.Location(x=160, y=-117, z=9.6)
    camLocation = carla.Location(spawnLocationWalker.x - 20, spawnLocationWalker.y - 15, spawnLocationWalker.z + 30)
    conncetion.__int__(reloadWorld=True, syncMode=sysncModeEnable, render=True, port=2000, camaraLocation=camLocation)
    return conncetion

# Return the distance between two actors
def distance_actor(actor1, actor2):
    try:
        pos1 = actor1.get_location()
        pos2 = actor2.get_location()
        distance = math.sqrt((pos1.x - pos2.x) ** 2 + (pos1.y - pos2.y) ** 2)
        return distance
    except:
        print("Fail")
        return 999

# Return the controls of a walker
def get_walker_action(world: carla.World, walker_id: int) -> carla.WalkerControl:
    """
    Get the current action of a given walker in the given world.
    """
    walker = world.get_actor(walker_id)
    if not walker or not isinstance(walker, carla.Walker):
        raise ValueError("Invalid walker ID")

    control = walker.get_control()
    return control

# Returns xy coordinates of two actors
def getXYVehicleWalker(world, vehicle_id, walker_id):
    pos1 = get_actor_position(world, vehicle_id)
    pos2 = get_actor_position(world, walker_id)
    return [pos1[0], pos1[1]], [pos2[0], pos2[1]]

# Replay a situation and return the xy coordinates of Vehicle and Walker
def show_x_rows_in_Carla(data, conncetion=None, time_look=0.05):
    live_mode = True

    if conncetion is None and live_mode:
        conncetion = get_connection()

    for x in data:
        index = x[9]
        replay_start_time = max(x[7] - 3.4, 0)
        replay_duration = 6.4
        vehicleID = x[0]
        walker_id = x[3]
        print(x, filtered_files[index], int(replay_start_time), replay_duration, vehicleID)
        i = replay_start_time
        positions = []
        positions_walker = []

        # Fix Positions
        if live_mode:
            # Genauere Berechnung
            while i < replay_start_time + replay_duration:

                conncetion.client.replay_file("D:/0_2023_3_25_1_5_steps-12000_Car-50_Walk-60.log", i, time_look, vehicleID)
                posVehicle, posWalker = getXYVehicleWalker(conncetion.world, vehicleID, walker_id)
                positions.append(posVehicle)
                positions_walker.append(posWalker)

                time.sleep(time_look)
                i += time_look
        else:
            positions = [[135.5831298828125, -131.85720825195312], [135.5831298828125, -131.85720825195312], [135.5831298828125, -131.85720825195312], [135.5831298828125, -131.85720825195312], [135.58383178710938, -131.85716247558594], [135.58604431152344, -131.85696411132812], [135.59097290039062, -131.85659790039062], [135.5990753173828, -131.85601806640625], [135.60926818847656, -131.855224609375], [135.6215362548828, -131.85430908203125], [135.6445770263672, -131.85256958007812], [135.66903686523438, -131.8507537841797], [135.68763732910156, -131.8493194580078], [135.71499633789062, -131.84716796875], [135.77377319335938, -131.8426971435547], [135.8214874267578, -131.83909606933594], [135.9039306640625, -131.8326416015625], [135.98129272460938, -131.82662963867188], [136.07606506347656, -131.8191680908203], [136.2110137939453, -131.80859375], [136.3422088623047, -131.7981414794922], [136.47645568847656, -131.7873992919922], [136.61428833007812, -131.7762451171875], [136.8255157470703, -131.75880432128906], [136.9663848876953, -131.74717712402344], [137.21017456054688, -131.7265625], [137.42236328125, -131.70848083496094], [137.7394256591797, -131.68089294433594], [137.9086456298828, -131.66612243652344], [138.13677978515625, -131.6459197998047], [138.4342041015625, -131.61802673339844], [138.67709350585938, -131.59173583984375], [138.9156036376953, -131.5624542236328], [139.19192504882812, -131.5266571044922], [139.57809448242188, -131.47215270996094], [139.78868103027344, -131.44313049316406], [140.15634155273438, -131.38584899902344], [140.4491729736328, -131.34266662597656], [140.78079223632812, -131.28831481933594], [141.16773986816406, -131.2095947265625], [141.50241088867188, -131.13265991210938], [141.8887481689453, -131.0311279296875], [142.30252075195312, -130.91110229492188], [142.57302856445312, -130.83001708984375], [143.00155639648438, -130.68821716308594], [143.3330841064453, -130.57386779785156], [143.75021362304688, -130.41893005371094], [144.10525512695312, -130.2819366455078], [144.49563598632812, -130.12095642089844], [144.9172821044922, -129.92977905273438], [145.23402404785156, -129.78050231933594], [145.61300659179688, -129.57644653320312], [145.9374542236328, -129.38792419433594], [146.30056762695312, -129.14804077148438], [146.57142639160156, -128.96096801757812], [146.88018798828125, -128.7196807861328], [147.20799255371094, -128.43142700195312], [147.4397735595703, -128.22669982910156], [147.78236389160156, -127.86465454101562], [148.03660583496094, -127.5818099975586], [148.28497314453125, -127.27692413330078], [148.54820251464844, -126.91146087646484], [148.74778747558594, -126.61710357666016], [148.9693145751953, -126.24052429199219], [149.13417053222656, -125.942626953125], [149.32205200195312, -125.53851318359375], [149.47314453125, -125.17882537841797], [149.62127685546875, -124.7685546875], [149.739013671875, -124.40785217285156], [149.84889221191406, -124.01734161376953], [149.94078063964844, -123.6434555053711], [150.0338897705078, -123.15087890625], [150.09259033203125, -122.81934356689453], [150.14251708984375, -122.449951171875], [150.1884307861328, -121.97608947753906], [150.21981811523438, -121.59825134277344], [150.24359130859375, -121.25077819824219], [150.2637481689453, -120.80875396728516], [150.27743530273438, -120.41180419921875], [150.28675842285156, -119.90682983398438], [150.29171752929688, -119.5722885131836], [150.29367065429688, -119.16107940673828], [150.29205322265625, -118.67637634277344], [150.29037475585938, -118.35051727294922], [150.2863311767578, -117.9641342163086], [150.28038024902344, -117.53646850585938], [150.27468872070312, -117.17073822021484], [150.26751708984375, -116.77596282958984], [150.25735473632812, -116.27574157714844], [150.24986267089844, -115.91715240478516], [150.24232482910156, -115.57335662841797], [150.23046875, -115.05990600585938], [150.22286987304688, -114.74787139892578], [150.212646484375, -114.31373596191406], [150.2033233642578, -113.91382598876953], [150.1938934326172, -113.50782775878906], [150.18478393554688, -113.11469268798828], [150.17601013183594, -112.73567199707031], [150.16639709472656, -112.31431579589844], [150.1566619873047, -111.88209533691406], [150.14710998535156, -111.45547485351562], [150.13916015625, -111.09929656982422], [150.1310272216797, -110.73152160644531], [150.12118530273438, -110.28587341308594], [150.11195373535156, -109.86737823486328], [150.10459899902344, -109.53746032714844], [150.09471130371094, -109.07413482666016], [150.08665466308594, -108.68972778320312], [150.0790557861328, -108.32303619384766], [150.0697784423828, -107.87020874023438], [150.0620880126953, -107.4897232055664], [150.05447387695312, -107.10865783691406], [150.04568481445312, -106.66442108154297], [150.0379180908203, -106.26891326904297], [150.02967834472656, -105.84744262695312], [150.0220184326172, -105.45429229736328], [150.01492309570312, -105.08953094482422], [150.00567626953125, -104.61028289794922], [149.99887084960938, -104.25544738769531], [149.9898681640625, -103.77825927734375], [149.98406982421875, -103.46900939941406], [149.97622680664062, -103.04949188232422], [149.968994140625, -102.65901184082031], [149.95933532714844, -102.14837646484375], [149.95359802246094, -101.81896209716797], [149.94667053222656, -101.43527221679688], [149.938720703125, -101.00300598144531], [149.9293212890625, -100.4889144897461], [149.9190673828125, -99.92473602294922]]
            positions_walker = [[160.13070678710938, -117.40694427490234], [160.19052124023438, -117.40694427490234], [160.21665954589844, -117.66267395019531], [160.21786499023438, -117.71417999267578], [160.22312927246094, -117.86064147949219], [160.22592163085938, -118.04315185546875], [160.2288818359375, -118.22000885009766], [160.22369384765625, -118.32418060302734], [160.26072692871094, -118.48604583740234], [160.2860107421875, -118.65225982666016], [160.31527709960938, -118.86042785644531], [160.33944702148438, -119.04650115966797], [160.34918212890625, -119.19811248779297], [160.354736328125, -119.3630599975586], [160.3742218017578, -119.56956481933594], [160.28228759765625, -119.51241302490234], [160.4352569580078, -119.70403289794922], [160.4981231689453, -119.85687255859375], [160.53720092773438, -120.01448059082031], [160.546630859375, -120.20621490478516], [160.53085327148438, -120.34964752197266], [160.51722717285156, -120.47566986083984], [160.50172424316406, -120.6014633178711], [160.43359375, -120.755615234375], [160.40011596679688, -120.8806381225586], [160.30157470703125, -120.99991607666016], [160.1641387939453, -121.09303283691406], [159.94232177734375, -121.1839828491211], [159.78602600097656, -121.2055892944336], [159.5968017578125, -121.1919174194336], [159.3787078857422, -121.17240905761719], [159.1265411376953, -121.15605163574219], [159.03164672851562, -121.1423568725586], [158.87925720214844, -121.13096618652344], [158.6512908935547, -121.12281799316406], [158.52468872070312, -121.1181640625], [158.32223510742188, -121.11580657958984], [158.1648406982422, -121.11493682861328], [157.99281311035156, -121.11553192138672], [157.79800415039062, -121.1176528930664], [157.6309814453125, -121.12006378173828], [157.44322204589844, -121.12362670898438], [157.2438507080078, -121.12804412841797], [157.1168975830078, -121.13006591796875], [156.91944885253906, -121.1342544555664], [156.76698303222656, -121.1376724243164], [156.57667541503906, -121.14238739013672], [156.41529846191406, -121.14679718017578], [156.235107421875, -121.1519775390625], [156.03456115722656, -121.15789031982422], [155.885498046875, -121.16312408447266], [155.70045471191406, -121.16651153564453], [155.54139709472656, -121.1681900024414], [155.35568237304688, -121.17084503173828], [155.2103271484375, -121.17308044433594], [155.03878784179688, -121.17704772949219], [154.84432983398438, -121.18096160888672], [154.71534729003906, -121.1843032836914], [154.5088653564453, -121.18910217285156], [154.35025024414062, -121.19353485107422], [154.2006072998047, -121.19560241699219], [154.05287170410156, -121.19808197021484], [153.92047119140625, -121.19940948486328], [153.80477905273438, -121.20188903808594], [153.70883178710938, -121.20177459716797], [153.5955352783203, -121.20027160644531], [153.49905395507812, -121.197998046875], [153.4080352783203, -121.19633483886719], [153.31869506835938, -121.20142364501953], [153.26425170898438, -121.20751953125], [153.19903564453125, -121.20907592773438], [153.20635986328125, -121.20455169677734], [153.23605346679688, -121.20146179199219], [153.28341674804688, -121.19300842285156], [153.31817626953125, -121.18852996826172], [153.35333251953125, -121.18690490722656], [153.35923767089844, -121.19135284423828], [153.35009765625, -121.21016693115234], [153.3363037109375, -121.22212982177734], [153.30821228027344, -121.23695373535156], [153.29107666015625, -121.24520874023438], [153.26426696777344, -121.25786590576172], [153.20974731445312, -121.2859115600586], [153.1820068359375, -121.29938507080078], [153.1365966796875, -121.3124008178711], [153.06568908691406, -121.34711456298828], [152.972412109375, -121.37740325927734], [152.8496551513672, -121.40342712402344], [152.68020629882812, -121.43809509277344], [152.5615234375, -121.46742248535156], [152.4418182373047, -121.49032592773438], [152.2375030517578, -121.50960540771484], [152.11746215820312, -121.51839447021484], [151.94065856933594, -121.52284240722656], [151.77267456054688, -121.52596282958984], [151.5993194580078, -121.52587890625], [151.43560791015625, -121.52262115478516], [151.27597045898438, -121.51970672607422], [151.09239196777344, -121.51522827148438], [150.90005493164062, -121.50904083251953], [150.7138671875, -121.50251770019531], [150.56356811523438, -121.49750518798828], [150.40777587890625, -121.49504852294922], [150.22177124023438, -121.4914321899414], [150.048583984375, -121.48360443115234], [149.90956115722656, -121.476806640625], [149.71766662597656, -121.47089385986328], [149.5499267578125, -121.4659423828125], [149.39141845703125, -121.46135711669922], [149.20484924316406, -121.46011352539062], [149.04258728027344, -121.46154022216797], [148.8827667236328, -121.46260833740234], [148.69024658203125, -121.4591064453125], [148.51393127441406, -121.4574966430664], [148.32992553710938, -121.45816040039062], [148.16455078125, -121.46342468261719], [148.0092315673828, -121.46896362304688], [147.80699157714844, -121.47926330566406], [147.66339111328125, -121.49111938476562], [147.46243286132812, -121.5015869140625], [147.3386993408203, -121.50877380371094], [147.1671905517578, -121.5248031616211], [147.00721740722656, -121.54682159423828], [146.80250549316406, -121.58785247802734], [146.66200256347656, -121.61848449707031], [146.51913452148438, -121.6523666381836], [146.3524932861328, -121.701416015625], [146.16197204589844, -121.75340270996094], [145.9464111328125, -121.8236312866211]]

        # Calculate the speeds between each pair of points
        print(f"Positions Vehicle: {positions}")
        print(f"Positions Walker: {positions_walker}")
        speeds = []
        for i in range(len(positions) - 1):
            distance = euclidean_distance(positions[i], positions[i + 1])
            speed = distance / time_look
            speeds.append(speed*3.6)
        speeds2 = []
        for i in range(len(positions_walker) - 1):
            distance = euclidean_distance(positions_walker[i], positions_walker[i + 1])
            speed = distance / time_look
            speeds2.append(speed*3.6)

        points1, points2 = positions, positions_walker

        # Extract the x and y coordinates for both sets into separate lists and rotate by 90 degrees counterclockwise
        x_rotated1, y_rotated1 = [-point[1] for point in points1], [point[0] for point in points1]
        x_rotated2, y_rotated2 = [-point[1] for point in points2], [point[0] for point in points2]

        # Plot the x and y coordinates for both sets as a scatter plot on the same chart
        fig, ax = plt.subplots()

        ax.scatter(x_rotated1, y_rotated1, label="Vehicle", s=20)
        ax.scatter(x_rotated2, y_rotated2, label="Walker", s=20)
        ax.set(title="X and Y Coordinates", xlabel="X Coordinate", ylabel="Y Coordinate", aspect='equal')
        ax.legend()

        # Invert the x-axis
        ax.invert_xaxis()

        # Show the plot
        plt.show()

folder_path_recordings = "./"

# Get all files in the folder
files = os.listdir(folder_path_recordings)

# Filter files that start with a number followed by an underscore
filtered_files = get_filtered_files(folder_path_recordings)

print(filtered_files)

path_prefix = "./"
data = load_data(path_prefix)
groups = process_groups(data)
sorted_data = sorted(groups, key=lambda x: -x[6])

x_cords = []
y_cords = []
ttc_s = []
speeds = []

# Show the first x rows of the sorted data
bestXrows = 10
for x in sorted_data[-bestXrows:]:
    # if x[6] < 0.5:
    x_cords.append(x[1])
    y_cords.append(x[2])
    ttc_s.append(x[6])
    speeds.append(x[8])


eintrag = 3
show_x_rows_in_Carla(sorted_data[0:1])


